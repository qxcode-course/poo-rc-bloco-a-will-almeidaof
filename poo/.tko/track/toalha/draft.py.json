{
    "patches": [
        {
            "label": "2025-09-17_14-09-33",
            "content": "@@ -1,25 +0,0 @@\n-print('odeio minha vida')\n",
            "lines": "0"
        },
        {
            "label": "2025-09-17_14-12-51",
            "content": "@@ -0,0 +1,25 @@\n+print('odeio minha vida')\n",
            "lines": "1"
        },
        {
            "label": "2025-09-17_14-12-58",
            "content": "@@ -1,291 +0,0 @@\n-class Towel:%0A    def __init__(self,color:str, size: str): # construtor%0A        self.color: str = %22%22 #atributo%0A        self.size: str = %22%22%0A        self.wetnees: int = 0%0A%0Aprint('Qual a cor da sua toalha?')%0Acolor = input()%0Atowel: Towel = Towel(color, %22P%22)%0A%0A%0Aprint(f%22Sua toalha %C3%A9 %7Btowel.color%7D%22)\n",
            "lines": "0"
        },
        {
            "label": "2025-09-17_14-46-13",
            "content": "@@ -284,9 +284,8 @@\n color%7D%22)\n-%0A\n",
            "lines": "12"
        },
        {
            "label": "2025-09-17_14-49-56",
            "content": "@@ -90,21 +90,18 @@\n : str = \n-color\n+%22%22\n  #atribu\n",
            "lines": "12"
        },
        {
            "label": "2025-09-17_14-51-18",
            "content": "@@ -131,20 +131,18 @@\n : str = \n-size\n+%22%22\n %0A       \n@@ -220,62 +220,8 @@\n t()%0A\n-print('Qual o tamanho da sua toalha?')%0Asize = input()%0A\n towe\n@@ -244,20 +244,19 @@\n (color, \n-size\n+%22P%22\n )%0A%0A%0Aprin\n@@ -289,33 +289,7 @@\n lor%7D\n- e do tamanho %7Btowel.size%7D\n %22)%0A\n",
            "lines": "12"
        },
        {
            "label": "2025-09-18_22-08-46",
            "content": "@@ -154,17 +154,17 @@\n lf.wetne\n-s\n+e\n s: int =\n@@ -171,134 +171,118 @@\n  0%0A%0A\n-    def __str__(self) -%3E str: #toString%0A        return f%22Color:%7Bself.color%7D, Size:%7Bself.size%7D, Wet:%7Bself.wetness%7D%22%0A    \n+print('Qual a cor da sua toalha?')%0Acolor = input()%0Aprint('Qual o tamanho da sua toalha?')%0Asize = input()\n %0Atowel\n-1\n : To\n@@ -297,79 +297,82 @@\n wel(\n-%22Blue%22, %22P%22)%0Aprint(towel1)%0A%0Atowel2: Towel = Towel(%22Red%22, %22G%22)%0Aprint(towel2)\n+color, size)%0A%0A%0Aprint(f%22Sua toalha %C3%A9 %7Btowel.color%7D e do tamanho %7Btowel.size%7D%22)%0A\n",
            "lines": "14"
        },
        {
            "label": "2025-09-24_13-02-10",
            "content": "@@ -171,79 +171,8 @@\n  0%0A%0A\n-    def dry(self,amount: int) -%3E None:%0A        self.wetness += amount%0A%0A\n     \n@@ -340,20 +340,41 @@\n l1)%0A\n+%0A\n towel\n-1.dry(5\n+2: Towel = Towel(%22Red%22, %22G%22\n )%0Apr\n@@ -370,22 +370,22 @@\n d%22, %22G%22)%0Aprint(towel\n-1\n+2\n )\n",
            "lines": "14"
        },
        {
            "label": "2025-09-24_13-06-18",
            "content": "@@ -28,24 +28,22 @@\n __(self,\n- \n color:\n- \n str, siz\n@@ -101,17 +101,16 @@\n or #\n- \n atributo\n s%0A  \n@@ -105,17 +105,16 @@\n atributo\n-s\n %0A       \n@@ -166,20 +166,16 @@\n int = 0%0A\n-    \n %0A    def\n@@ -184,17 +184,16 @@\n ry(self,\n- \n amount: \n@@ -240,448 +240,8 @@\n ount\n-%0A        if self.wetness %3E= self.isMaxWetness():%0A            self.wetness = self.isMaxWetness()%0A            print(%22toalha saturada, ensopada, pingando%22)%0A%0A    def wringOut(self):%0A        self.wetness = 0%0A%0A    def isMaxWetness(self) -%3E int:%0A        if self.size == %22P%22: # early return%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0 # default return\n %0A%0A  \n@@ -269,17 +269,16 @@\n %3E str: #\n- \n toString\n@@ -357,31 +357,19 @@\n s%7D%22%0A\n-%0Adef main(): %0A\n     \n+%0A\n towel\n+1\n : To\n@@ -385,670 +385,57 @@\n el(%22\n+Blue\n %22, %22\n+P\n %22)\n- # 2: criar um obj com qq valor inicial%0A    while True: # 3: loop infinito%0A%0A        line: str = input() # 4: perguntar ao usuario%0A        args: list%5Bstr%5D = line.split(%22 %22) # 5: separar argumentos%0A%0A        if args%5B0%5D == %22end%22: #6 ponto de parada%0A            break%0A        elif args%5B0%5D == %22new%22: # color size%0A            color: str = args%5B1%5D%0A            size: str = args%5B2%5D%0A            towel = Towel(color, size)%0A        elif args%5B0%5D == %22dry%22:%0A            amount: int = int(args%5B1%5D)%0A            towel.dry(amount)%0A        elif args%5B0%5D == %22show%22:%0A            print(towel)%0A        else: # 7: erro%0A            print(%22fail: comando n%C3%A3o encontrado%22)%0A%0Amain() # passo 1%0A\n+%0Aprint(towel1)%0Atowel1.dry(5)%0Aprint(towel1)\n",
            "lines": "16"
        },
        {
            "label": "2025-09-24_13-59-34",
            "content": "class Towel:\n    def __init__(self, color: str, size: str): # construtor\n        self.color: str = color # atributos\n        self.size: str = size\n        self.wetness: int = 0\n    \n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness()\n            print(\"toalha saturada, ensopada, pingando\")\n\n    def wringOut(self):\n        self.wetness = 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\": # early return\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0 # default return\n\n    def __str__(self) -> str: # toString\n        return f\"Color:{self.color}, Size:{self.size}, Wet:{self.wetness}\"\n\ndef main(): \n    towel: Towel = Towel(\"\", \"\") # 2: criar um obj com qq valor inicial\n    while True: # 3: loop infinito\n\n        line: str = input() # 4: perguntar ao usuario\n        args: list[str] = line.split(\" \") # 5: separar argumentos\n\n        if args[0] == \"end\": #6 ponto de parada\n            break\n        elif args[0] == \"new\": # color size\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"dry\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        elif args[0] == \"show\":\n            print(towel)\n        else: # 7: erro\n            print(\"fail: comando n\u00e3o encontrado\")\n\nmain() # passo 1\n",
            "lines": "49"
        }
    ]
}